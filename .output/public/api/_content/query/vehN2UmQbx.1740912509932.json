[{"_path":"/blogs/demo02","_dir":"blogs","_draft":false,"_partial":false,"_locale":"","title":"Rust WebAssembly Demo02 ðŸŽ¨","description":"Sample Code in Rust & Wasm","date":"2nd March 2025","image":"/blogs-img/20250302.png","alt":"wasm_game_of_maze_screen","ogImage":"/blogs-img/20250302.png","tags":["rust","wasm","webassembly"],"published":true,"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"introduction"},"children":[{"type":"text","value":"Introduction"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Previously, I created a sample for a WebAssembly mini-game, but it didn't work in Edition 2024 because the use of static mut for global variables was prohibited. Therefore, to make it work in Edition 2024, I changed the way the game object was defined, moving away from using global variables and instead defining the game object using Trait + 'static.\""}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://myurioka.github.io/demo02","rel":["nofollow"]},"children":[{"type":"text","value":"Play in browser"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/myurioka/demo02","rel":["nofollow"]},"children":[{"type":"text","value":"Source"}]}]},{"type":"element","tag":"h2","props":{"id":"what-i-learned"},"children":[{"type":"text","value":"What I learned"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/myurioka/demo02","rel":["nofollow"]},"children":[{"type":"text","value":"Sequece Diagram"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"introduction","depth":2,"text":"Introduction"},{"id":"what-i-learned","depth":2,"text":"What I learned"}]}},"_type":"markdown","_id":"content:blogs:5. demo02.md","_source":"content","_file":"blogs/5. demo02.md","_stem":"blogs/5. demo02","_extension":"md","sitemap":{"loc":"/blogs/demo02"}},{"_path":"/blogs/demo01","_dir":"blogs","_draft":false,"_partial":false,"_locale":"","title":"Rust WebAssembly Demo ðŸŽ¨","description":"Sample Code in Rust & Wasm","date":"fifth Feb 2025","image":"/blogs-img/20250215.png","alt":"wasm_game_of_maze_screen","ogImage":"/blogs-img/20250215.png","tags":["rust","wasm","webassembly"],"published":true,"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"introduction"},"children":[{"type":"text","value":"Introduction"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This sample does not work with the 2024 Edition. If you are using the 2024 Edition, please refer to the following source code."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/myurioka/demo02","rel":["nofollow"]},"children":[{"type":"text","value":"Source"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can use WebAssembly to manipulate the browser from Rust, but when the conventions of WASM are layered with Rust's modern features such as borrowing and ownership, lifetimes, closures, and generics, even with a lot of information available, it's difficult to get your own app to build. So, I created a simple (as much as possible in one file with reduced coding) mini-app to experiment with 'web_bindgen' and 'web-sys' processing."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://myurioka.github.io/demo01","rel":["nofollow"]},"children":[{"type":"text","value":"Play in browser"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/myurioka/demo01","rel":["nofollow"]},"children":[{"type":"text","value":"Source"}]}]},{"type":"element","tag":"h2","props":{"id":"what-i-learned"},"children":[{"type":"text","value":"What I learned"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/myurioka/demo01","rel":["nofollow"]},"children":[{"type":"text","value":"Sequece Diagram"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"introduction","depth":2,"text":"Introduction"},{"id":"what-i-learned","depth":2,"text":"What I learned"}]}},"_type":"markdown","_id":"content:blogs:4. demo01.md","_source":"content","_file":"blogs/4. demo01.md","_stem":"blogs/4. demo01","_extension":"md","sitemap":{"loc":"/blogs/demo01"}},{"_path":"/blogs/maze","_dir":"blogs","_draft":false,"_partial":false,"_locale":"","title":"Wasm Mini Game maze ðŸ‘»","description":"Mini Maze game in Rust & Wasm","date":"3th Jan 2025","image":"/blogs-img/20250103.png","alt":"wasm_game_of_maze_screen","ogImage":"/blogs-img/20250103.png","tags":["rust","wasm","webassembly"],"published":true,"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"introduction"},"children":[{"type":"text","value":"Introduction"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Anyone who played Wizardry on a floppy disk as a kid has probably thought about making a maze game at some point.I used to have no clue how to create a 3D maze, but with today's powerful PCs, I've been able to bring my imaginary maze to life on screen."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://myurioka.github.io/maze/","rel":["nofollow"]},"children":[{"type":"text","value":"Play in browser"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/myurioka/maze","rel":["nofollow"]},"children":[{"type":"text","value":"Source"}]}]},{"type":"element","tag":"h2","props":{"id":"what-i-learned"},"children":[{"type":"text","value":"What I learned"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I coded this project without overthinking things like abstraction or conditional statements. It was a pretty smooth process, but I had a lot of fun experimenting with different ways to render characters using SVG. In the end, I decided to output them as IMG tags. I thought I'd share this approach with anyone learning about WASM."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"introduction","depth":2,"text":"Introduction"},{"id":"what-i-learned","depth":2,"text":"What I learned"}]}},"_type":"markdown","_id":"content:blogs:3. maze.md","_source":"content","_file":"blogs/3. maze.md","_stem":"blogs/3. maze","_extension":"md","sitemap":{"loc":"/blogs/maze"}}]